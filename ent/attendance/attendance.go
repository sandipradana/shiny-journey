// Code generated by ent, DO NOT EDIT.

package attendance

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the attendance type in the database.
	Label = "attendance"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAttendanceDate holds the string denoting the attendance_date field in the database.
	FieldAttendanceDate = "attendance_date"
	// FieldCheckInTime holds the string denoting the check_in_time field in the database.
	FieldCheckInTime = "check_in_time"
	// FieldCheckOutTime holds the string denoting the check_out_time field in the database.
	FieldCheckOutTime = "check_out_time"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// EdgeEmployee holds the string denoting the employee edge name in mutations.
	EdgeEmployee = "employee"
	// Table holds the table name of the attendance in the database.
	Table = "attendances"
	// EmployeeTable is the table that holds the employee relation/edge.
	EmployeeTable = "attendances"
	// EmployeeInverseTable is the table name for the Employee entity.
	// It exists in this package in order to avoid circular dependency with the "employee" package.
	EmployeeInverseTable = "employees"
	// EmployeeColumn is the table column denoting the employee relation/edge.
	EmployeeColumn = "employee_attendances"
)

// Columns holds all SQL columns for attendance fields.
var Columns = []string{
	FieldID,
	FieldAttendanceDate,
	FieldCheckInTime,
	FieldCheckOutTime,
	FieldStatus,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "attendances"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"employee_attendances",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusAbsent  Status = "absent"
	StatusPresent Status = "present"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusAbsent, StatusPresent:
		return nil
	default:
		return fmt.Errorf("attendance: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Attendance queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAttendanceDate orders the results by the attendance_date field.
func ByAttendanceDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAttendanceDate, opts...).ToFunc()
}

// ByCheckInTime orders the results by the check_in_time field.
func ByCheckInTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCheckInTime, opts...).ToFunc()
}

// ByCheckOutTime orders the results by the check_out_time field.
func ByCheckOutTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCheckOutTime, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByEmployeeField orders the results by employee field.
func ByEmployeeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEmployeeStep(), sql.OrderByField(field, opts...))
	}
}
func newEmployeeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EmployeeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, EmployeeTable, EmployeeColumn),
	)
}
