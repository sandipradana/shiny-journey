// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"shiny-journey/ent/attendance"
	"shiny-journey/ent/employee"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Attendance is the model entity for the Attendance schema.
type Attendance struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// AttendanceDate holds the value of the "attendance_date" field.
	AttendanceDate time.Time `json:"attendance_date,omitempty"`
	// CheckInTime holds the value of the "check_in_time" field.
	CheckInTime *time.Time `json:"check_in_time,omitempty"`
	// CheckOutTime holds the value of the "check_out_time" field.
	CheckOutTime *time.Time `json:"check_out_time,omitempty"`
	// Status holds the value of the "status" field.
	Status attendance.Status `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AttendanceQuery when eager-loading is set.
	Edges                AttendanceEdges `json:"edges"`
	employee_attendances *int
	selectValues         sql.SelectValues
}

// AttendanceEdges holds the relations/edges for other nodes in the graph.
type AttendanceEdges struct {
	// Employee holds the value of the employee edge.
	Employee *Employee `json:"employee,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EmployeeOrErr returns the Employee value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AttendanceEdges) EmployeeOrErr() (*Employee, error) {
	if e.loadedTypes[0] {
		if e.Employee == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: employee.Label}
		}
		return e.Employee, nil
	}
	return nil, &NotLoadedError{edge: "employee"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Attendance) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case attendance.FieldID:
			values[i] = new(sql.NullInt64)
		case attendance.FieldStatus:
			values[i] = new(sql.NullString)
		case attendance.FieldAttendanceDate, attendance.FieldCheckInTime, attendance.FieldCheckOutTime:
			values[i] = new(sql.NullTime)
		case attendance.ForeignKeys[0]: // employee_attendances
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Attendance fields.
func (a *Attendance) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case attendance.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case attendance.FieldAttendanceDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field attendance_date", values[i])
			} else if value.Valid {
				a.AttendanceDate = value.Time
			}
		case attendance.FieldCheckInTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field check_in_time", values[i])
			} else if value.Valid {
				a.CheckInTime = new(time.Time)
				*a.CheckInTime = value.Time
			}
		case attendance.FieldCheckOutTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field check_out_time", values[i])
			} else if value.Valid {
				a.CheckOutTime = new(time.Time)
				*a.CheckOutTime = value.Time
			}
		case attendance.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				a.Status = attendance.Status(value.String)
			}
		case attendance.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field employee_attendances", value)
			} else if value.Valid {
				a.employee_attendances = new(int)
				*a.employee_attendances = int(value.Int64)
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Attendance.
// This includes values selected through modifiers, order, etc.
func (a *Attendance) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryEmployee queries the "employee" edge of the Attendance entity.
func (a *Attendance) QueryEmployee() *EmployeeQuery {
	return NewAttendanceClient(a.config).QueryEmployee(a)
}

// Update returns a builder for updating this Attendance.
// Note that you need to call Attendance.Unwrap() before calling this method if this Attendance
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Attendance) Update() *AttendanceUpdateOne {
	return NewAttendanceClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Attendance entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Attendance) Unwrap() *Attendance {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Attendance is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Attendance) String() string {
	var builder strings.Builder
	builder.WriteString("Attendance(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("attendance_date=")
	builder.WriteString(a.AttendanceDate.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := a.CheckInTime; v != nil {
		builder.WriteString("check_in_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := a.CheckOutTime; v != nil {
		builder.WriteString("check_out_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", a.Status))
	builder.WriteByte(')')
	return builder.String()
}

// Attendances is a parsable slice of Attendance.
type Attendances []*Attendance
